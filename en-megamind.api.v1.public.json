{
  "openapi": "3.0.0",
  "info": {
    "title": "Decentramind.io API",
    "version": "1.0",
    "contact": {
      "email": "info@decentramind.io"
    },
    "description": "API for interacting with Decentramind.io Platform"
  },
  "servers": [
    {
      "url": "https://api.decentramind.io/api/v1"
    }
  ],
  "paths": {
    "/auth": {
      "get": {
        "summary": "Getting the api_key",
        "operationId": "get-auth",
        "description": "The call serves to authorize on the Decentramind.io platform and obtain the api_key authorization token for all subsequent calls.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "api_key": {
                      "type": "string",
                      "minLength": 1,
                      "description": "user's api_key"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "token": "asdgfdgertgfbnfrgetrweterwerewrghfdnjsdvdzx"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "tags": [
          "General"
        ],
        "security": [
          {
            "Basic HTTP Auth": []
          }
        ]
      }
    },
    "/node/remove/{hwid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hwid"
        }
      ],
      "delete": {
        "summary": "Remove node",
        "operationId": "delete-node-remove-hwid",
        "responses": {
          "200": {
            "$ref": "#/components/responses/response_ok"
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "description": "Completely removes the node from the Decentramind.io system and removes all tasks associated with it.",
        "tags": [
          "Nodes"
        ],
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "summary": "Ping",
        "tags": [
          "General"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/response_ok"
          }
        },
        "operationId": "get-ping",
        "description": "Checking API server availability.",
        "security": []
      }
    },
    "/node/get/{hwid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hwid"
        }
      ],
      "get": {
        "summary": "Getting information on a node",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_node_description"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "operationId": "get-node-get-hwid",
        "description": "Getting node specifications",
        "parameters": [],
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/node/list": {
      "get": {
        "summary": "Getting a list of nodes this user owns.",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/owner_node_description"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "operationId": "get-node-list",
        "description": "Obtaining a list of nodes for the owner. Only possible with api_key of node owner.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/node/telemetry/{hwid}": {
      "post": {
        "summary": "Getting telemetry data on node",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {},
                "examples": {
                  "example-cpu": {
                    "value": ",result,table,_start,_stop,_field,_value,_time\n,_result,0,2021-02-15T10:37:11.655069961Z,2021-02-15T10:46:11.655069961Z,usage_system,1.3921200819550459,2021-02-15T10:38:00Z\n,_result,0,2021-02-15T10:37:11.655069961Z,2021-02-15T10:46:11.655069961Z,usage_system,1.4099406521792697,2021-02-15T10:46:00Z\n,_result,1,2021-02-15T10:37:11.655069961Z,2021-02-15T10:46:11.655069961Z,usage_user,0.9763815588311731,2021-02-15T10:38:00Z\n,_result,1,2021-02-15T10:37:11.655069961Z,2021-02-15T10:46:11.655069961Z,usage_user,1.094791276559522,2021-02-15T10:39:00Z"
                  },
                  "example-gpu": {
                    "value": ",result,table,_start,_stop,_field,index,_value,_time\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,0,100,2021-02-19T11:16:30Z\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,1,100,2021-02-19T11:16:50Z\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,2,100,2021-02-19T11:17:10Z\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,3,100,2021-02-19T11:17:30Z\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,4,100,2021-02-19T11:17:50Z\n,,0,2021-02-19T11:16:17.596820102Z,2021-02-19T11:21:17.596820102Z,utilization_gpu,5,100,2021-02-19T11:18:10Z"
                  },
                  "example-mem": {
                    "value": ",result,table,_start,_stop,_field,_value,_time\n,,0,2021-02-19T11:49:22.321501336Z,2021-02-19T11:54:22.321501336Z,used_percent,4.664005064890251,2021-02-19T11:49:50Z\n,,0,2021-02-19T11:49:22.321501336Z,2021-02-19T11:54:22.321501336Z,used_percent,4.663517681301821,2021-02-19T11:50:10Z\n,,0,2021-02-19T11:49:22.321501336Z,2021-02-19T11:54:22.321501336Z,used_percent,4.663042482303102,2021-02-19T11:50:30Z\n,,0,2021-02-19T11:49:22.321501336Z,2021-02-19T11:54:22.321501336Z,used_percent,4.663761373096036,2021-02-19T11:50:50Z"
                  }
                }
              }
            }
          }
        },
        "operationId": "post-node-telemetry",
        "description": "Returns telemetry data on CPU, GPU, memory, etc. utilization for the selected node and time range in csv format. Available only with node owner key.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/telemetry_request"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "timestamp_from": "2017-07-21T17:32:28Z",
                    "timestamp_to": "2017-07-21T17:32:28Z",
                    "data_source": "cpu"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/hwid"
        }
      ]
    },
    "/user/nodes/list": {
      "get": {
        "summary": "Getting a list of currently available nodes",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user_node_description"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "operationId": "get-user-nodes-list",
        "description": "Getting a list of available nodes. Returns the list of nodes available for  running tasks.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      },
      "post": {
        "summary": "Getting a list of available nodes with filtering",
        "operationId": "post-user-nodes-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_node_description"
                }
              }
            }
          }
        },
        "description": "Getting a list of available nodes with filtering. Returns the list of nodes available for  running tasks.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filter_data"
              }
            }
          },
          "description": "All fields are optional"
        },
        "tags": [
          "User"
        ]
      }
    },
    "/user/tasks/add": {
      "post": {
        "summary": "Adding a new task",
        "operationId": "post-user-tasks-add",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_description"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_auth_error"
          }
        },
        "description": "Adding a task to the node with the specified identifier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_task_description"
              }
            }
          },
          "description": "Description of the created task:"
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/remove/{taskid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taskid"
        }
      ],
      "delete": {
        "summary": "Stopping and deleting a task",
        "operationId": "delete-user-tasks-remove-taskid",
        "responses": {
          "200": {
            "$ref": "#/components/responses/response_ok"
          }
        },
        "description": "Deletes the specified task from a node.",
        "tags": [
          "User"
        ],
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/restart/{taskid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taskid"
        }
      ],
      "post": {
        "summary": "Restarting a task",
        "operationId": "post-user-tasks-restart-taskid",
        "description": "Stops the task and starts it again on the same node.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/response_ok"
          }
        },
        "tags": [
          "User"
        ],
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/list": {
      "get": {
        "summary": "Getting a list of running tasks for a user",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task_description"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-user-tasks-list",
        "description": "Returns the list of tasks started by the user with the given api_key.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/telemetry/{taskid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taskid"
        }
      ],
      "post": {
        "summary": "Getting telemetry data for a running task",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "operationId": "post-user-tasks-telemetry-taskid",
        "description": "Returns telemetry data on CPU, GPU, memory, etc. utilization for the selected task and time range in csv format. Available only with the key of the user who started the task.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/telemetry_request"
              }
            }
          }
        },
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/logs/{taskid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taskid"
        }
      ],
      "get": {
        "summary": "Getting the logs of a running task",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_logs"
                }
              }
            }
          }
        },
        "operationId": "get-user-tasks-log-taskid",
        "description": "Returns the logs generated by the user's task, encoded in base64.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/user/tasks/default": {
      "get": {
        "summary": "Operations with the current default task",
        "tags": [
          "User"
        ],
        "operationId": "get-user-tasks-default",
        "description": "Get a description of the task that is runned when the equipment is idle. Available only to the owner of the node.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/default_task_description"
                }
              }
            }
          }
        },
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      },
      "post": {
        "summary": "",
        "operationId": "post-user-tasks-default",
        "responses": {
          "200": {
            "$ref": "#/components/responses/response_ok"
          }
        },
        "description": "Replaces a task that is running when the node is idle. Tasks currently running will be stopped and replaced by a new task. Available only to the owner of the node.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/default_task_description"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/apps/list": {
      "get": {
        "summary": "Getting a list of applications",
        "tags": [
          "Apps"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/app_description"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-apps-list",
        "description": "Getting a list of applications"
      }
    },
    "/apps/get/{app_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/app_id"
        }
      ],
      "get": {
        "summary": "Getting the app description by its app_id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/app_description"
                }
              }
            }
          }
        },
        "operationId": "get-apps-get-app_id",
        "description": "Getting the app description by its app_id",
        "tags": [
          "Apps"
        ]
      }
    },
    "/user/tasks/addapptask": {
      "post": {
        "summary": "Starting a new task-application",
        "tags": [
          "Apps",
          "User"
        ],
        "operationId": "post-user-tasks-addapptask",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/new_apptask_description"
              }
            }
          },
          "description": ""
        },
        "description": "Starting a new app. The user gets the list of available applications via /apps/list, takes the app_id and the list of available options from it, fills in the required parameters and forms a params object. The mount options are not used yet, but must be filled with empty lines."
      }
    },
    "/user/tasks/billing/{taskid}": {
      "parameters": [
        {
          "name": "taskid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Unique task identifier"
        }
      ],
      "get": {
        "summary": "Getting the cost of the task",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing_resp"
                }
              }
            }
          }
        },
        "operationId": "get-v1-user-tasks-billing-task_id",
        "description": "For a running task - the current cost. For an already completed task - full cost.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    },
    "/node/billing/{hwid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/hwid"
        }
      ],
      "post": {
        "summary": "Getting billing by node",
        "operationId": "post-node-billing-hwid",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing_resp"
                }
              }
            }
          }
        },
        "description": "Returns for the specified node for the specified period the electricity consumed and tokens earned",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/time_range"
              }
            }
          }
        },
        "tags": [
          "Nodes"
        ]
      }
    },
    "/user/tasks/history": {
      "post": {
        "summary": "Getting the task list for the specified user",
        "operationId": "post-user-tasks-history",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task_description"
                  }
                }
              }
            }
          }
        },
        "description": "Returns all tasks that started or finished in the specified time period by the user with specified api_key",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/time_range"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/user/balance/{userid}": {
      "parameters": [
        {
          "name": "userid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Unique user identifier"
        }
      ],
      "get": {
        "summary": "User balance",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_balance_resp"
                }
              }
            }
          }
        },
        "operationId": "get-user-balance-user_id",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ],
        "description": "Getting the balance in tokens"
      }
    },
    "/node/filter_data": {
      "get": {
        "summary": "Obtaining data to filter when selecting available nodes",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_data"
                }
              }
            }
          }
        },
        "operationId": "get-node-filter_data",
        "description": "Get the ranges for the filter when searching for available nodes. All fields of the object will be filled.",
        "security": [
          {
            "Authorization with an api_key header": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "api_response": {
        "description": "General API response. Contains error code and text.",
        "type": "object",
        "title": "",
        "x-examples": {
          "example-1": {
            "code": 0,
            "message": "ok"
          }
        },
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "full_node_description": {
        "description": "Full node description.",
        "type": "object",
        "properties": {
          "cpus": {
            "type": "array",
            "description": "List of CPUs installed on the node.",
            "items": {
              "type": "object",
              "description": ""
            }
          },
          "gpus": {
            "type": "array",
            "description": "List of GPUs installed on the node.",
            "items": {
              "type": "object"
            }
          },
          "hostname": {
            "type": "string",
            "minLength": 1,
            "description": "hostname\n"
          },
          "hwid": {
            "type": "string",
            "minLength": 1,
            "description": "Unique node identifier"
          },
          "ip": {
            "type": "string",
            "minLength": 1,
            "description": "IPv4 адрес"
          },
          "network": {
            "type": "string",
            "minLength": 1,
            "description": "Network connection speed"
          },
          "ram": {
            "type": "number",
            "description": "Node RAM in Mb"
          }
        },
        "required": [
          "cpus",
          "gpus",
          "hostname",
          "hwid",
          "ip",
          "network",
          "ram"
        ],
        "x-examples": {
          "example-1": {
            "cpus": [
              {}
            ],
            "gpus": [
              {}
            ],
            "hostname": "string",
            "hwid": "string",
            "ip": "string",
            "network": "string",
            "ram": 0
          }
        }
      },
      "new_task_description": {
        "title": "new_task_description",
        "type": "object",
        "x-examples": {
          "example-1": {
            "image": "string",
            "params": "string",
            "hwid": "string"
          }
        },
        "properties": {
          "image": {
            "type": "string",
            "description": "Image name in Decentramind.io Docker Registry."
          },
          "params": {
            "type": "object",
            "description": "Parameters to send to the image."
          },
          "hwid": {
            "type": "string",
            "description": "Unique node identifier"
          }
        },
        "required": [
          "image",
          "params",
          "hwid"
        ]
      },
      "telemetry_request": {
        "description": "",
        "type": "object",
        "properties": {
          "timestamp_from": {
            "type": "string",
            "minLength": 1,
            "description": "Start of time range in ISO-8601 format (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time"
          },
          "timestamp_to": {
            "type": "string",
            "minLength": 1,
            "description": "End of time range in ISO-8601 format (https://tools.ietf.org/html/rfc3339#section-5.6)",
            "format": "date-time"
          },
          "data_source": {
            "type": "string",
            "minLength": 1,
            "description": "Type of data requested",
            "enum": [
              "cpu",
              "gpu",
              "mem"
            ]
          }
        },
        "required": [
          "timestamp_from",
          "timestamp_to",
          "data_source"
        ]
      },
      "task_description": {
        "title": "task_description",
        "type": "object",
        "description": "Running task description.",
        "properties": {
          "taskid": {
            "type": "string",
            "description": "Unique task identifier"
          },
          "hwid": {
            "type": "string",
            "description": "Unique node identifier"
          },
          "image": {
            "type": "string",
            "description": "Image path in Decentramind.io Docker Regsitry"
          },
          "params": {
            "type": "string",
            "description": "Parameters to pass to docker image"
          },
          "state": {
            "type": "string",
            "description": "Current state of the task: 1 - unknown, 2 - preparation, 3 - started, 4 - stopped, 5 - error",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "error_msg": {
            "type": "string"
          },
          "ip": {
            "type": "string",
            "description": "Task IPv4 address"
          }
        },
        "required": [
          "taskid",
          "hwid",
          "image",
          "params",
          "state",
          "error_msg",
          "ip"
        ]
      },
      "user_node_description": {
        "description": "Full node description for the user",
        "type": "object",
        "x-examples": {
          "example-1": {
            "cpus": [
              {}
            ],
            "gpus": [
              {}
            ],
            "hostname": "string",
            "hwid": "string",
            "ip": "string",
            "network": "string",
            "ram": 0
          }
        },
        "properties": {
          "cpus": {
            "type": "array",
            "description": "List of CPUs installed on the node.",
            "items": {
              "type": "object",
              "description": ""
            }
          },
          "gpus": {
            "type": "array",
            "description": "List of GPUs installed on the node.",
            "items": {
              "type": "object"
            }
          },
          "hwid": {
            "type": "string",
            "minLength": 1,
            "description": "Unique node identifier"
          },
          "network": {
            "type": "string",
            "minLength": 1,
            "description": "Network connection speed"
          },
          "ram": {
            "type": "number",
            "description": "Node RAM in Mb"
          }
        },
        "required": [
          "cpus",
          "gpus",
          "hwid",
          "network",
          "ram"
        ]
      },
      "owner_node_description": {
        "title": "owner_node_description",
        "type": "object",
        "properties": {
          "descr": {
            "$ref": "#/components/schemas/full_node_description"
          },
          "task_type": {
            "type": "number",
            "description": "Type of task currently running on the node: 0 - no task, 1 - default task, 2 - custom task",
            "enum": [
              0,
              1,
              2
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "down"
            ],
            "description": "Node connection status"
          }
        },
        "required": [
          "descr",
          "task_type",
          "state"
        ],
        "description": "Node description for the owner"
      },
      "task_logs": {
        "title": "task_logs",
        "type": "object",
        "properties": {
          "taskid": {
            "type": "string",
            "description": "Unique node identifier"
          },
          "logs_b64": {
            "type": "string",
            "description": "Base64-encoded logs"
          }
        },
        "required": [
          "taskid",
          "logs_b64"
        ]
      },
      "default_task_description": {
        "title": "default_task_description",
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Image name in Decentramind.io Docker Registry"
          },
          "params": {
            "type": "string",
            "description": "Parameters to transfer to the task"
          }
        },
        "required": [
          "image",
          "params"
        ]
      },
      "app_description": {
        "title": "app_description",
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "docker_image": {
            "type": "string"
          },
          "params": {
            "type": "object"
          }
        },
        "description": "Application description. Params is a json object describing the list of applicable/expected parameters in the application."
      },
      "fs_options_description": {
        "title": "fs_options_description",
        "type": "object",
        "description": "Description of the options for mounting external FS to the container",
        "properties": {
          "fs_type": {
            "type": "string"
          },
          "in_path": {
            "type": "string"
          },
          "out_path": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "new_apptask_description": {
        "title": "new_apptask_description",
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "params": {
            "type": "object"
          },
          "": {
            "$ref": "#/components/schemas/fs_options_description"
          }
        },
        "description": "Description of the task-application being created. params - json object containing parameters from app_description.params and values filled by user."
      },
      "billing_resp": {
        "title": "billing_resp",
        "type": "object",
        "description": "Describes the value in tokens and watts",
        "properties": {
          "power_draw_w": {
            "type": "number",
            "description": "Power consumption, W"
          },
          "tokens": {
            "type": "number",
            "description": "Cost or profit in tokens"
          }
        },
        "required": [
          "power_draw_w",
          "tokens"
        ]
      },
      "time_range": {
        "title": "time_range",
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "description": ""
      },
      "filter_data": {
        "title": "filter_data",
        "type": "object",
        "x-examples": {},
        "description": "Data source for the filter when searching for a free node",
        "properties": {
          "ram_size_min": {
            "type": "integer",
            "description": "Min RAM"
          },
          "ram_size_max": {
            "type": "integer",
            "description": "Max RAM"
          },
          "hashrate_min": {
            "type": "integer",
            "description": "Min hasrate"
          },
          "hashrate_max": {
            "type": "integer",
            "description": "Max hashrate"
          },
          "gpu_count_min": {
            "type": "integer",
            "description": "Min GPU count"
          },
          "gpu_count_max": {
            "type": "integer",
            "description": "Max GPU count"
          },
          "gpus_dict": {
            "type": "array",
            "description": "GPU models list",
            "items": {
              "type": "string"
            }
          },
          "cpus_dict": {
            "type": "array",
            "description": "CPU models list",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "user_balance_resp": {
        "title": "user_balance_resp",
        "type": "object",
        "description": "",
        "properties": {
          "balance": {
            "type": "number",
            "description": "User balance in tokens"
          },
          "withdrawable_balance": {
            "type": "number",
            "description": "Balance of tokens available for withdrawal"
          }
        }
      }
    },
    "responses": {
      "response_ok": {
        "description": "General API response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/api_response"
            },
            "examples": {
              "example-1": {
                "value": {
                  "code": 0,
                  "message": "ok"
                }
              }
            }
          }
        }
      },
      "response_auth_error": {
        "description": "Authorization error. Incorrect api_key, login or password was provided.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/api_response"
            },
            "examples": {
              "example-1": {
                "value": {
                  "code": 2,
                  "message": "auth exception: unauthorized action"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization with an api_key header": {
        "name": "api-key",
        "type": "apiKey",
        "in": "header",
        "description": "api-key is the secret that authorizes the user on Decentramind.io. You can get it from /v1/auth."
      },
      "Basic HTTP Auth": {
        "type": "http",
        "scheme": "basic",
        "description": ""
      }
    },
    "parameters": {
      "hwid": {
        "name": "hwid",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "description": "The identifier of the node. Available in /v1/node/list",
        "required": true
      },
      "taskid": {
        "name": "taskid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique node identifier"
      },
      "app_id": {
        "name": "app_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique app identifier"
      }
    }
  },
  "tags": [
    {
      "name": "General"
    },
    {
      "name": "Nodes"
    },
    {
      "name": "Private"
    },
    {
      "name": "User"
    },
    {
      "name": "Apps"
    }
  ],
  "security": [
    {
      "Authorization with an api_key header": []
    },
    {
      "Basic HTTP Auth": []
    }
  ]
}